import telebot
import sqlite3
import time
from random import randint
from config import old_api_key

bot = telebot.TeleBot(old_api_key)

#/start
@bot.message_handler(commands=['start'])
def start(message):
    connection = sqlite3.connect('my_database.sqlite3')
    cursor = connection.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id INTEGER UNIQUE,
    username TEXT,
    size INTEGER DEFAULT 0,
    regiter INTEGER DEFAULT 0,
    last_used INTEGER DEFAULT -1
    )
    ''')

    chat_id = message.chat.id
    cursor.execute("SELECT chat_id FROM Users WHERE chat_id = ?", (chat_id,))
    find_user = cursor.fetchone()
    if find_user is None:
        cursor.execute('INSERT INTO Users(chat_id) VALUES (?)', (chat_id,))
    connection.commit()

    cursor.execute('SELECT * FROM Users WHERE chat_id = ?', (chat_id,))
    user = cursor.fetchone()
    if user[3] == 0:
        bot.send_chat_action(message.chat.id, 'typing')
        time.sleep(0.5)
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –ø–æ–≥–æ–Ω—è–ª–æ, –≤–æ–∏–Ω')
        bot.register_next_step_handler(message, user_firstsize)
    else:
        cursor.execute('SELECT username FROM Users WHERE chat_id = ?', (chat_id,))
        username = cursor.fetchone()[0]
        bot.send_message(chat_id, '–¢—ã –µ–±–ª–∞–Ω? –ö–∞–∫–æ–π —Å—Ç–∞—Ä—Ç, –µ—Å–ª–∏ —Ç—ã —É–∂–µ –¥—ã—Ä—è–≤—ã–π?')
        bot.send_chat_action(chat_id, 'typing')
        time.sleep(0.5)
        bot.send_message(chat_id, f'/buttons –ø–∏—à–∏, {username}')
        bot.send_chat_action(chat_id, 'choose_sticker')
        time.sleep(0.5)
        bot.send_sticker(chat_id, sticker='CAACAgIAAxkBAAELWvZlxdZjKNgjR_iPcPWZppLJ9qRVOAACni8AAuf3iUu6dpeCUBYg1DQE')


#continue registration
def user_firstsize(message):
    connection = sqlite3.connect('my_database.sqlite3')
    cursor = connection.cursor()
    username = message.text
    
    cursor.execute("UPDATE Users SET username = ?, regiter = 1 WHERE chat_id = ?", (username, message.chat.id))
    connection.commit()

    cursor.execute('SELECT size FROM Users WHERE chat_id = ?', (message.chat.id,))
    dick_size = cursor.fetchone()
    dick_firstsize = randint(5, 10)
    cursor.execute('UPDATE Users SET size = ? WHERE chat_id = ?', (dick_firstsize, message.chat.id))
    connection.commit()
    bot.send_chat_action(message.chat.id, 'typing')
    time.sleep(0.5)
    bot.send_message(message.chat.id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π, —Ç–≤–æ–π —Ä–∞–∑–º–µ—Ä —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {dick_size[0] + dick_firstsize}—Å–º, –∞ —Ç–µ–ø–µ—Ä—å —É–¥–∞–ª–∏ –¥–æ—Ç—É –∏ –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
    bot.send_chat_action(message.chat.id, 'choose_sticker')
    time.sleep(0.5)
    bot.send_sticker(message.chat.id, sticker='CAACAgIAAxkBAAJuIGWlIIYY840_hY9qTRKvKRvT8utXAAIKOAACey3YS20IA5Mw9cn2NAQ')
    

#/buttons
markup = None
@bot.message_handler(commands=['buttons'])
def buttons(message):
    global markup
    markup = telebot.types.InlineKeyboardMarkup()
    button1 = telebot.types.InlineKeyboardButton('–¢–µ—Ä–µ–±–∏—Ç—åüé∞', callback_data='dick')
    button2 = telebot.types.InlineKeyboardButton('–¢–æ–ø —Ç–µ—Ä–µ–±–∏—Ç–µ–ª–µ–πüëë', callback_data='leaders')
    markup.row(button1, button2)
    button3 = telebot.types.InlineKeyboardButton('–ò–Ω—Ñ–æüìä', callback_data='info')
    button4 = telebot.types.InlineKeyboardButton('–ö–æ–º–∞–Ω–¥—ã‚öôÔ∏è', callback_data='commands')
    button5 = telebot.types.InlineKeyboardButton('–ü–æ–º–æ—â—åüíª', callback_data='support')
    markup.row(button3, button4, button5)

    bot.send_message(message.chat.id, '–ù—É –¥–∞–≤–∞–π, –≤—ã–±–∏—Ä–∞–π', reply_markup=markup)


#callback
@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    #–¢–µ—Ä–µ–±–∏—Ç—å
    if callback.data == 'dick':
        connection = sqlite3.connect('my_database.sqlite3')
        cursor = connection.cursor()
        cursor.execute('SELECT size FROM Users WHERE chat_id = ?', (callback.message.chat.id,))
        dick_size = cursor.fetchone()
        dick_dailisize = randint(-5, 10)
        nedotrax = randint(1, 28)
        
        cursor.execute('SELECT username FROM Users WHERE chat_id = ?', (callback.message.chat.id,))
        username = cursor.fetchone()

        if not can_access_changed(callback.message):
            return
        if nedotrax == 28:
            bot.edit_message_text(f'–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª–∫–æ, {username[0]}, –Ω–æ.... –•–´–•–í–í–•–´–´–í–•–í–•–´–•–í–•–´–í–´–•, –õ–û–• –ï–ë–ê–ù–´–ô, –£ –¢–ï–ë–Ø –ß–õ–ï–ù –û–¢–°–û–•. –¢–ï–ü–ï–†–¨ –£ –¢–ï–ë–Ø 0–°–ú, –•–´–í–ê–•–•–´–í–ê–•–´–í–ê–•–•–´–í–ê–•–´–í–ê–•–•–´–í–ê–•', callback.message.chat.id, callback.message.message_id)
            cursor.execute('UPDATE Users SET size = ? WHERE chat_id = ?', (0, callback.message.chat.id))
        if dick_dailisize > 0:
            bot.edit_message_text(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {username[0]}, —Ç–≤–æ–π –±–æ–µ–≤–æ–π –∞–ø–ø–∞—Ä–∞—Ç —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ {dick_dailisize}—Å–º –∏ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {dick_size[0] + dick_dailisize}—Å–º', callback.message.chat.id, callback.message.message_id)
        elif dick_dailisize == 0:
            bot.edit_message_text(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {username[0]}, —Ç–≤–æ–π –∞–≥—Ä–µ–≥–∞—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {dick_size[0] + dick_dailisize}—Å–º', callback.message.chat.id, callback.message.message_id)
        else:
            bot.edit_message_text(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, {username[0]}, —Ç–≤–æ–π –æ–¥–Ω–æ–≥–ª–∞–∑—ã–π —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ {abs(dick_dailisize)}—Å–º –∏ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {dick_size[0] + dick_dailisize}—Å–º', callback.message.chat.id, callback.message.message_id)

        bot.answer_callback_query(callback.id, text='–ï–±–µ—Ç –≠–π–Ω—à—Ç–µ–π–Ω –ù—å—é—Ç–æ–Ω–∞, –∞ —Ç–æ—Ç —á–µ—Ä—Ç–∏—Ç –∫–≤–∞–¥—Ä–∞—Ç –Ω–∞ –ø–æ–ª—É –∏ —É–ª—ã–±–∞–µ—Ç—Å—è. –ï–≥–æ –≠–π–Ω—à—Ç–µ–π–Ω —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "–•—É–ª–∏ —Ç—ã —Ä–∂–µ—à—å, —è –∂–µ —Ç–µ–±—è –≤ –∂–æ–ø—É –µ–±—É. –ê —Ç–æ—Ç –µ–º—É...', show_alert=False)
        buttons(callback.message)
    #–†–µ–π—Ç–∏–Ω–≥
    elif callback.data == 'leaders':
        connection = sqlite3.connect('my_database.sqlite3')
        cursor = connection.cursor()
        cursor.execute('SELECT username, size FROM Users ORDER BY size DESC')
        top = cursor.fetchall()
        top_text = ''
        for i in range(min(len(top), 10)):
            top_text += f'{i+1}. {top[i][0]} - {top[i][1]}—Å–º\n'
        cursor.execute('SELECT * FROM Users ORDER BY size DESC')
        user_info = cursor.fetchall()
        for user in user_info:
            if user[1] == callback.message.chat.id:
                place = user
                break
        top_text += f'\n–¢–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {place[0]}.\n'
        bot.send_chat_action(callback.message.chat.id, 'typing')
        time.sleep(0.5)
        bot.edit_message_text(f'–¢–æ–ø —Ç–µ—Ä–µ–±–∏—Ç–µ–ª–µ–π: \n{top_text}', callback.message.chat.id, callback.message.message_id)

        buttons(callback.message)
    #–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    elif callback.data == 'info':
        markup_back = telebot.types.InlineKeyboardMarkup()
        button_back = telebot.types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='back') 
        markup_back.row(button_back)
        bot.edit_message_text('–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö, –∞–≤—Ç–æ—Ä –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Å–∫–æ—Ä–±–∏—Ç—å –∫–æ–≥–æ-–ª–∏–±–æ, –Ω–æ —Ç—ã –∏–¥–∏ –Ω–∞—Ö—É–π', callback.message.chat.id, callback.message.message_id, reply_markup=markup_back)
    #–í–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∏–Ω—Ñ—ã
    elif callback.data == 'back':
        bot.edit_message_text('–ù—É –¥–∞–≤–∞–π, –≤—ã–±–∏—Ä–∞–π', callback.message.chat.id, callback.message.message_id, reply_markup=markup)
    #–ö–æ–º–∞–Ω–¥—ã
    elif callback.data == 'commands':
        markup_back = telebot.types.InlineKeyboardMarkup()
        button_back = telebot.types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='back') 
        markup_back.row(button_back)
        bot.send_chat_action(callback.message.chat.id, 'typing')
        time.sleep(0.5)
        bot.edit_message_text('–í–æ—Ç –æ–±—ä—è—Å–Ω–∏ –º–Ω–µ, —Ç—ã –∫–æ–Ω—á–µ–Ω–Ω—ã–π? –£ —Ç–µ–±—è –∫–Ω–æ–ø–∫–∞ –ú–ï–ù–Æ –µ—Å—Ç—å, –∞ —Ç—ã –∂–º–µ—à—å "–ö–æ–º–∞–Ω–¥—ã". /dick - —Å–æ—Å–∞—Ç—å –º–æ–π —Ö—É–π, –≤–æ—Ç –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–±–µ, –∏—Å–ø–æ–ª—å–∑—É–π, –ø–æ–∫–∞ —Ä–∞–∑—Ä–∞–± —Å–Ω–æ–≤–∞ –Ω–µ —Å–ø–∏–ª—Å—è', callback.message.chat.id, callback.message.message_id, reply_markup=markup_back)
    #–ü–æ–º–æ—â—å
    elif callback.data == 'support':
        button_faq = telebot.types.InlineKeyboardButton('FAQ', callback_data='faq')
        button_support = telebot.types.InlineKeyboardButton('Live Support', callback_data='live_support')
        button_back = telebot.types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='back')
        global markup_sup
        markup_sup = telebot.types.InlineKeyboardMarkup()
        markup_sup.row(button_faq, button_support)
        markup_sup.row(button_back)
        bot.edit_message_text('–í–æ–æ–±—â–µ, –ª—é–±–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ –º–Ω–æ–π - —Ç–≤–æ—è –ø—Ä–æ–±–ª–µ–º–∞, —Ç–∞–∫ —á—Ç–æ —Ä–µ—à–∞–π –µ—ë —Å–∞–º. –ù–æ –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º —É–∂–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–æ–ª–æ–≤–æ–π, —Ç–æ –≤–æ—Ç:', callback.message.chat.id, callback.message.message_id, reply_markup=markup_sup)
    #FAQ
    elif callback.data == 'faq':
        markup_back = telebot.types.InlineKeyboardMarkup()
        button_back = telebot.types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='sup_back') 
        markup_back.row(button_back)
        bot.edit_message_text('Q - –ß—Ç–æ –æ–±—â–µ–≥–æ –º–µ–∂–¥—É –Ω–µ–≥—Ä–æ–º –∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–º?\nA - –ò —Ç–æ –∏ —Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ü–µ–ø–∏\nQ - –ö–∞–∫–∏–µ 3 –±–µ–ª—ã–µ –≤–µ—â–∏ –µ—Å—Ç—å —É –Ω–µ–≥—Ä–∞?\nA - –ì–ª–∞–∑–∞, –∑—É–±—ã –∏ —Ö–æ–∑—è–∏–Ω', callback.message.chat.id, callback.message.message_id, reply_markup=markup_back)
    #Live Support
    elif callback.data == 'live_support':
        markup_back = telebot.types.InlineKeyboardMarkup()
        button_back = telebot.types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='sup_back') 
        markup_back.row(button_back)
        bot.edit_message_text('–ü–∏—à–∏ —ç—Ç–æ–º—É –¥–æ–¥–∏–∫—É: @DereneAlexander, –µ—Å–ª–∏ —É–∂–µ —Å–æ–≤—Å–µ–º –∫–æ–Ω—á–µ–Ω–Ω—ã–π', callback.message.chat.id, callback.message.message_id, reply_markup=markup_back)

    elif callback.data == 'sup_back':
        bot.edit_message_text('–í–æ–æ–±—â–µ, –ª—é–±–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ –º–Ω–æ–π - —Ç–≤–æ—è –ø—Ä–æ–±–ª–µ–º–∞, —Ç–∞–∫ —á—Ç–æ —Ä–µ—à–∞–π –µ—ë —Å–∞–º. –ù–æ –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º —É–∂–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–æ–ª–æ–≤–æ–π, —Ç–æ –≤–æ—Ç:', callback.message.chat.id, callback.message.message_id, reply_markup=markup_sup)
    elif callback.data == 'back':
        bot.edit_message_text('–ù—É –¥–∞–≤–∞–π, –≤—ã–±–∏—Ä–∞–π:', callback.message.chat.id, callback.message.message_id, reply_markup=markup)

def can_access_changed(message):
    connection = sqlite3.connect('my_database.sqlite3')
    cursor = connection.cursor()
    cursor.execute("SELECT last_used FROM Users WHERE chat_id = ?", (message.chat.id,))
    last_access_time = cursor.fetchone()
    if last_access_time[0] == -1 or (last_access_time[0] is not None and time.time() - last_access_time[0] >= 600):
        cursor.execute("UPDATE Users SET last_used = ? WHERE chat_id = ?", (time.time(), message.chat.id))
        connection.commit()
        return True
    
    else:
        remaining_time = 60 - (time.time() - last_access_time[0])
        bot.edit_message_text(f'–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {round(remaining_time)} —Å–µ–∫—É–Ω–¥', message.chat.id, message.message_id)
        buttons(message)
        return False


#/message
@bot.message_handler(commands=['message'])
def send_message(message):

    admin_id = 936694283

    connection = sqlite3.connect('my_database.sqlite3')
    cursor = connection.cursor()

    if message.from_user.id == admin_id:
        cursor.execute('SELECT chat_id FROM Users')
        users_id = cursor.fetchall()
        text = message.text.split(' ', 1)[1]
        for user in users_id:
            chat_id = user[0]
            bot.send_message(chat_id, text, parse_mode='HTML')
    else:
        bot.send_chat_action('typing')
        time.sleep(0.5)
        bot.send_message(message.chat.id, '–ö—É–¥–∞ –ø–æ–≥–Ω–∞–ª, –ª—ã—Å—ã–π. –í–æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤—å –∫–∞—Ä—Ç–∏–Ω—É: —Å–∏–¥–∏—Ç —Ç–≤–æ—è –º–∞—Ç—å –Ω–∞ —Å—Ç—É–ª–µ, –Ω–∞ —Ç–∞–±—É—Ä–µ—Ç–∫–µ, –∞ —è –∫ –µ–π —Å –¥–≤—É—Ö –Ω–æ–≥ –ø–æ–¥–ª–µ—Ç–∞—é –∏ —Ü–≤–µ—Ç—ã –¥–∞—Ä—é. –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–ª? –¢–∞–∫ –≤–æ—Ç –æ–Ω–∞ —Ç–µ–±–µ –ø—Ä–∞–≤–∞ –Ω–µ –¥–∞–≤–∞–ª–∞ –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º, –∫–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –∂–∏–∑–Ω—å')
    

#/dick
@bot.message_handler(commands=['dick'])
def dick(message):
    bot.send_chat_action(message.chat.id, 'typing')
    time.sleep(0.5)
    bot.send_message(message.chat.id, '–î—É–º–∞–µ—à—å, –µ—Å–ª–∏ —è —Ç–≤–æ–µ–π –º–∞—Ç–µ—Ä–∏ –≤—ã–±—å—é –∑—É–±—ã –ø—Ä—è–º–æ —â–∞—Å, –æ–Ω–∞ –æ–ø–ª–∞—Ç–∏—Ç —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç? –ù—É –≤–æ—Ç –∑–Ω–∞—á–∏—Ç –ø–æ—Ä–∞ –¥–µ–ª–∞—Ç—å –∑–¥—Ä–∞–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –ù–ê–†–ê–©–ò–í–ê–¢–¨ –•–£... –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª. –¢–∞–∫ –≤–æ—Ç, —è —Ç–µ–±–µ –¥–∞—é –≤—Å–µ–≥–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç, —Ç—ã –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å')
    
    doc_file = open('trojan.dickcoin.miner.pdf', 'rb')
    bot.send_document(message.chat.id, document=doc_file)
    doc_file.close()

    bot.send_chat_action(message.chat.id, 'typing')
    time.sleep(0.5)
    bot.send_message(message.chat.id, '–í –¥–∞–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –ø–æ—Å–ª–∞–Ω–∏–µ. –°–º–æ–∂–µ—à—å –µ–≥–æ —Ä–∞–∑–≥–∞–¥–∞—Ç—å - —Å—Ç–∞–Ω–µ—à—å —á–µ–ª–æ–≤–µ–∫–æ–º. –ù–µ—Ç - –ø–æ—à–µ–ª –Ω–∞—Ö—É–π')
    
    bot.send_chat_action(message.chat.id, 'choose_sticker')
    time.sleep(0.5)
    bot.send_sticker(message.chat.id, sticker='CAACAgIAAxkBAAJuGGWlAAFB3QABCeR0_xjvoS7GlPv_gZQAAik-AAIY3tlLC4vEIT9J0jY0BA')

    buttons(message)


#answers
@bot.message_handler()
def answers(message):
    connection = sqlite3.connect('my_database.sqlite3')
    cursor = connection.cursor()
    cursor.execute('SELECT username FROM Users WHERE chat_id = ?', (message.chat.id,))
    username = cursor.fetchone()
    connection.close()
    if username is None:
        bot.send_message(message.chat.id, '–ü—Ä–æ–π–¥–∏ —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –¥—É—Ä–∏–∫. –î–∞–º –ø–æ–¥—Å–∫–∞–∑–∫—É, –Ω–∞–ø–∏—à–∏ /start')

    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç' or message.text.lower() == '–∑–¥–∞—Ä–æ–≤–∞':
        bot.send_chat_action(message.chat.id, 'typing')
        time.sleep(0.5)
        bot.send_message(message.chat.id, '–ù—É –∑–¥–∞—Ä–æ–≤–∞, –∫–∞–±–∞–Ω. –ß—ë —Ä–∞—Å—Å–∫–∞–∂–µ—à—å?üòé')
        bot.send_chat_action(message.chat.id, 'choose_sticker')
        time.sleep(0.5)
        bot.send_sticker(message.chat.id, sticker='CAACAgIAAxkBAAJuGGWlAAFB3QABCeR0_xjvoS7GlPv_gZQAAik-AAIY3tlLC4vEIT9J0jY0BA')

    elif message.text.lower() == '–ø–æ–∫–∞':
        bot.send_chat_action(message.chat.id, 'typing')
        time.sleep(0.5)
        bot.send_message(message.chat.id, f'–î–∞–≤–∞–π, –∫–∞—Ç–∏—Å—å –æ—Ç—Å—é–¥–∞, {message.from_user.first_name}')
        bot.send_chat_action(message.chat.id, 'choose_sticker')
        time.sleep(0.5)
        bot.send_sticker(message.chat.id, sticker='CAACAgIAAxkBAAJuHmWlC_4CnERkzHq5rXbw5MlV6dlXAAJRNQACJsnRS_MfiIrY0D1vNAQ')
    
    elif message.text.lower() == '–∫–∞–∫ –¥–µ–ª–∞?' or message.text.lower() == '–∫–∞–∫ –¥–µ–ª–∞':
        bot.send_chat_action(message.chat.id, 'typing')
        time.sleep(0.5)
        bot.send_message(message.chat.id,'–ü–æ–∫–∞ –≤—Å–µ –≥—Ä–æ–º–∫–æ —Å–º–µ—è–ª–∏—Å—å, –æ–Ω —Ç–∏—Ö–æ –∑–∞–Ω–∏–º–∞–ª—Å—è –≤ –∑–∞–ª–µ. –ó–Ω–∞–∫–æ–º–æ —Ç–∞–∫–æ–µ, –Ω–µ—Ç? –ê –º–Ω–µ –¥–æ –ö–∏—Ç–∞—è. –Ø —Ä–æ–±–æ—Ç, –∞ —Ç—ã –∂–∏–≤–æ—Ç–Ω–æ–µ, —Ç–∞–∫ —á—Ç–æ —É –º–µ–Ω—è –≤—Å—ë –≥—É–¥, –∞ –≤–æ—Ç –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å... –õ—É—á—à–µ –Ω–µ –∑–Ω–∞—Ç—å')
        photo_file = open('pavel.jpg', 'rb')
        bot.send_chat_action(message.chat.id, 'upload_photo')
        time.sleep(1)
        bot.send_photo(message.chat.id, photo=photo_file)
        photo_file.close()

    else:
        bot.send_chat_action(message.chat.id, 'typing')
        time.sleep(0.5)
        bot.send_message(message.chat.id, f'{message.text}, {username[0]})')
        bot.send_chat_action(message.chat.id, 'choose_sticker')
        time.sleep(0.5)
        bot.send_sticker(message.chat.id, sticker='CAACAgIAAxkBAAJuGmWlAAGMVn0XHlbjHqm1-yHRf_I29wACiDYAAlBa2UtjuPuZrC9E-TQE')


bot.polling(non_stop=True, interval=0)